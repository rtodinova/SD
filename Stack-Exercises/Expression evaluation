#include<iostream>
#include<string>
#include<stack>

using namespace std;

double apply(char operation, double first, double second)
{
	switch (operation){
	case '+': return first + second;
	case '*': return first*second;
	case'-': return first - second;
	case'/': return first / second;
	}
}

void evaluateTwo(stack<double>& values, stack<char>& operations)
{
	double first = values.top();
	values.pop();
	double second = values.top();
	values.pop();
	char operation = operations.top();
	operations.pop();

	values.push(apply(operation, first, second));
}

bool hasPrecedense(char firstOperation, char secondOperation)
{
	if (secondOperation == '(' || secondOperation == ')')
		return false;
	if ((firstOperation == '*' || firstOperation == '/') && (secondOperation == '+' || secondOperation == '-'))
		return false;
	return true;
}

double evaluate(string expression)
{
	stack<double> values;
	stack<char> operations;
	for (int i = 0; i < expression.length(); i++)
	{
		if (expression[i] == ' ') continue;
		if (expression[i] == '(') operations.push(expression[i]);
		if (expression[i] >= '0' && expression[i] <= '9') values.push(expression[i] - '0');
		if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*' || expression[i] == '/')
		{
			while (!operations.empty() && hasPrecedense(expression[i], operations.top()))
				evaluateTwo(values, operations);
			operations.push(expression[i]);
		}
		if (expression[i] == ')')
		{
			while (operations.top() != '(')
				evaluateTwo(values, operations);
			operations.pop();
		}
	}

	while (!operations.empty())
	{
		evaluateTwo(values, operations);
	}

	return values.top();
}

int main()
{
	string str = "(1+3)*(5+2)";
	cout << evaluate(str) << endl;
}
